<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/batch
       http://www.springframework.org/schema/batch/spring-batch.xsd
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/task
	   http://www.springframework.org/schema/task/spring-task.xsd">
	
	<batch:job id="cpDataToNewDBJob" restartable="true">
		<batch:step id="readDataFromOldDBStep" next="readWriteStep" allow-start-if-complete="true">
			<batch:tasklet transaction-manager="worldTXManager" ref="readDataFromOldDBTasklet"/>
		</batch:step>
		<batch:step id="readWriteStep" next="readDataFromNewDBStep" allow-start-if-complete="true">
			<batch:tasklet transaction-manager="worldTXManager">
				<batch:chunk reader="cityReader" processor="itemFileProcessor" writer="itemJDBCWriter" commit-interval="1000"/>
			</batch:tasklet>
		</batch:step>
		<batch:step id="readDataFromNewDBStep" allow-start-if-complete="true">
			<batch:tasklet transaction-manager="worldTXManager" ref="readDataFromNewDBTasklet"/>
		</batch:step>
	</batch:job>
	
	<bean id="cityReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="worldDataSource"/>
		<property name="sql" value="SELECT * FROM CITY"/>
		<property name="rowMapper" ref="cityRowMapper"/>
	</bean>
	<bean id="cityRowMapper" class="test.integration2.dao.CityRowMapper"/>
	
	<bean id="itemFileProcessor" class="test.integration2.task.ItemFileProessor"/>
	
	<bean id="itemFileWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
	    <property name="resource" value="file:target/test-outputs/output.txt" />
	    <property name="lineAggregator">
	        <bean class="org.springframework.batch.item.file.transform.PassThroughLineAggregator"/>
	    </property>
	</bean>
	
	<bean id="itemJDBCWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="newWorldDataSource" />
		<property name="sql">
		  <value>
			<![CDATA[	
				insert into city(name,countrycode,district,population) values (:name, :countryCode, :district, :population)
			]]>
		  </value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>
	
	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean"/>
	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository"/>
	</bean>
	
	<bean id="readDataFromOldDBTasklet" class="test.integration2.task.ReadDataFromOldDBTasklet" scope="step">
		<property name="cityDao" ref="cityDao"/>
	</bean>
	<bean id="readDataFromNewDBTasklet" class="test.integration2.task.ReadDataFromNewDBTasklet" scope="step">
		<property name="cityDao" ref="newCityDao"/>
	</bean>
	
	<bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry" />
	<task:scheduled-tasks>
		<task:scheduled ref="readDataFromOldDBJobLauncher" method="exec" cron="*/1 * * * * *"/>
	</task:scheduled-tasks>
	
	<bean id="readDataFromOldDBJobLauncher" class="test.integration2.task.ReadDataFromOldDBJobLauncher">
		<property name="jobLauncher" ref="jobLauncher"/>
		<property name="job" ref="cpDataToNewDBJob"/>
	</bean>
</beans>